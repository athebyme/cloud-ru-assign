// Code generated by MockGen. DO NOT EDIT.
// Source: driven.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	url "net/url"
	reflect "reflect"

	balancer "github.com/athebyme/cloud-ru-assign/internal/core/domain/balancer"
	ratelimit "github.com/athebyme/cloud-ru-assign/internal/core/domain/ratelimit"
	ports "github.com/athebyme/cloud-ru-assign/internal/core/ports"
	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockLogger) With(args ...any) ports.Logger {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(ports.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerMockRecorder) With(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLogger)(nil).With), args...)
}

// MockHealthChecker is a mock of HealthChecker interface.
type MockHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerMockRecorder
}

// MockHealthCheckerMockRecorder is the mock recorder for MockHealthChecker.
type MockHealthCheckerMockRecorder struct {
	mock *MockHealthChecker
}

// NewMockHealthChecker creates a new mock instance.
func NewMockHealthChecker(ctrl *gomock.Controller) *MockHealthChecker {
	mock := &MockHealthChecker{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthChecker) EXPECT() *MockHealthCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockHealthChecker) Check(target *url.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockHealthCheckerMockRecorder) Check(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockHealthChecker)(nil).Check), target)
}

// MockBackendRepository is a mock of BackendRepository interface.
type MockBackendRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBackendRepositoryMockRecorder
}

// MockBackendRepositoryMockRecorder is the mock recorder for MockBackendRepository.
type MockBackendRepositoryMockRecorder struct {
	mock *MockBackendRepository
}

// NewMockBackendRepository creates a new mock instance.
func NewMockBackendRepository(ctrl *gomock.Controller) *MockBackendRepository {
	mock := &MockBackendRepository{ctrl: ctrl}
	mock.recorder = &MockBackendRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendRepository) EXPECT() *MockBackendRepositoryMockRecorder {
	return m.recorder
}

// DecrementConnections mocks base method.
func (m *MockBackendRepository) DecrementConnections(backend *balancer.Backend) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecrementConnections", backend)
}

// DecrementConnections indicates an expected call of DecrementConnections.
func (mr *MockBackendRepositoryMockRecorder) DecrementConnections(backend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementConnections", reflect.TypeOf((*MockBackendRepository)(nil).DecrementConnections), backend)
}

// GetActiveConnections mocks base method.
func (m *MockBackendRepository) GetActiveConnections(backend *balancer.Backend) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveConnections", backend)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetActiveConnections indicates an expected call of GetActiveConnections.
func (mr *MockBackendRepositoryMockRecorder) GetActiveConnections(backend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveConnections", reflect.TypeOf((*MockBackendRepository)(nil).GetActiveConnections), backend)
}

// GetBackends mocks base method.
func (m *MockBackendRepository) GetBackends() []*balancer.Backend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackends")
	ret0, _ := ret[0].([]*balancer.Backend)
	return ret0
}

// GetBackends indicates an expected call of GetBackends.
func (mr *MockBackendRepositoryMockRecorder) GetBackends() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackends", reflect.TypeOf((*MockBackendRepository)(nil).GetBackends))
}

// GetNextHealthyBackend mocks base method.
func (m *MockBackendRepository) GetNextHealthyBackend() (*balancer.Backend, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextHealthyBackend")
	ret0, _ := ret[0].(*balancer.Backend)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetNextHealthyBackend indicates an expected call of GetNextHealthyBackend.
func (mr *MockBackendRepositoryMockRecorder) GetNextHealthyBackend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextHealthyBackend", reflect.TypeOf((*MockBackendRepository)(nil).GetNextHealthyBackend))
}

// IncrementConnections mocks base method.
func (m *MockBackendRepository) IncrementConnections(backend *balancer.Backend) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementConnections", backend)
}

// IncrementConnections indicates an expected call of IncrementConnections.
func (mr *MockBackendRepositoryMockRecorder) IncrementConnections(backend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementConnections", reflect.TypeOf((*MockBackendRepository)(nil).IncrementConnections), backend)
}

// MarkBackendStatus mocks base method.
func (m *MockBackendRepository) MarkBackendStatus(backendUrl *url.URL, alive bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkBackendStatus", backendUrl, alive)
}

// MarkBackendStatus indicates an expected call of MarkBackendStatus.
func (mr *MockBackendRepositoryMockRecorder) MarkBackendStatus(backendUrl, alive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkBackendStatus", reflect.TypeOf((*MockBackendRepository)(nil).MarkBackendStatus), backendUrl, alive)
}

// SetStrategy mocks base method.
func (m *MockBackendRepository) SetStrategy(strategy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStrategy", strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStrategy indicates an expected call of SetStrategy.
func (mr *MockBackendRepositoryMockRecorder) SetStrategy(strategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStrategy", reflect.TypeOf((*MockBackendRepository)(nil).SetStrategy), strategy)
}

// MockForwarder is a mock of Forwarder interface.
type MockForwarder struct {
	ctrl     *gomock.Controller
	recorder *MockForwarderMockRecorder
}

// MockForwarderMockRecorder is the mock recorder for MockForwarder.
type MockForwarderMockRecorder struct {
	mock *MockForwarder
}

// NewMockForwarder creates a new mock instance.
func NewMockForwarder(ctrl *gomock.Controller) *MockForwarder {
	mock := &MockForwarder{ctrl: ctrl}
	mock.recorder = &MockForwarderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForwarder) EXPECT() *MockForwarderMockRecorder {
	return m.recorder
}

// Forward mocks base method.
func (m *MockForwarder) Forward(w http.ResponseWriter, r *http.Request, target *balancer.Backend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Forward", w, r, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Forward indicates an expected call of Forward.
func (mr *MockForwarderMockRecorder) Forward(w, r, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockForwarder)(nil).Forward), w, r, target)
}

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockRateLimiter) Allow(clientID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", clientID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockRateLimiterMockRecorder) Allow(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockRateLimiter)(nil).Allow), clientID)
}

// RemoveRateLimit mocks base method.
func (m *MockRateLimiter) RemoveRateLimit(clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRateLimit", clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRateLimit indicates an expected call of RemoveRateLimit.
func (mr *MockRateLimiterMockRecorder) RemoveRateLimit(clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRateLimit", reflect.TypeOf((*MockRateLimiter)(nil).RemoveRateLimit), clientID)
}

// SetRateLimit mocks base method.
func (m *MockRateLimiter) SetRateLimit(clientID string, settings *ratelimit.RateLimitSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRateLimit", clientID, settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRateLimit indicates an expected call of SetRateLimit.
func (mr *MockRateLimiterMockRecorder) SetRateLimit(clientID, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRateLimit", reflect.TypeOf((*MockRateLimiter)(nil).SetRateLimit), clientID, settings)
}

// Stop mocks base method.
func (m *MockRateLimiter) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockRateLimiterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRateLimiter)(nil).Stop))
}
